const Message = require('../models/messages');
const {
  getUserSocketId,
  onlineUsers,
} = require('../services/socket/userSocketHandler'); // Th√™m onlineUsers v√†o import

async function sendMessage(socket, io) {
  socket.on('sendMessage', async (data) => {
    const { receiverId, content } = data;

    // X√°c ƒë·ªãnh senderId t·ª´ socket
    let senderId = null;
    for (let [userId, socketId] of onlineUsers) {
      if (socketId === socket.id) {
        senderId = userId;
        break;
      }
    }

    if (!senderId) {
      console.error('‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c senderId t·ª´ socket');
      return;
    }

    // T·∫°o message instance
    const message = new Message({
      senderId,
      receiverId,
      content,
    });

    const receiverSocketId = getUserSocketId(receiverId);

    try {
      // ƒê·∫£m b·∫£o l∆∞u DB v√† g·ª≠i socket n·∫øu online
      const saveMessagePromise = message.save();

      const sendSocketPromise = new Promise((resolve) => {
        if (receiverSocketId) {
          io.to(receiverSocketId).emit('receiveMessage', message);
          console.log(`üì© G·ª≠i tin nh·∫Øn socket ƒë·∫øn ${receiverId}`);
        }
        resolve(); // v·∫´n resolve n·∫øu offline ƒë·ªÉ kh√¥ng l√†m l·ªói to√†n b·ªô
      });

      // Th·ª±c hi·ªán c·∫£ 2 promise
      await Promise.all([saveMessagePromise, sendSocketPromise]);
      console.log('‚úÖ Tin nh·∫Øn ƒë√£ l∆∞u v√† x·ª≠ l√Ω socket xong');

      // N·∫øu offline th√¨ g·ª≠i FCM
      if (!receiverSocketId) {
        // ƒë·ªÉ x·ª≠ l√Ω sau
      }
      // G·ª≠i l·∫°i cho sender
      socket.emit('receiveMessage', message);
    } catch (error) {
      console.error('‚ùå L·ªói trong khi x·ª≠ l√Ω tin nh·∫Øn:', error);
    }
  });
}

async function getMessages(socket, io) {
  socket.on('getMessages', async (data) => {
    const { otherUserId } = data;

    // X√°c ƒë·ªãnh senderId t·ª´ socket
    let currentUserId = null;
    for (let [userId, socketId] of onlineUsers) {
      if (socketId === socket.id) {
        currentUserId = userId;
        break;
      }
    }

    if (!currentUserId) {
      console.error('‚ùå Kh√¥ng x√°c ƒë·ªãnh ƒë∆∞·ª£c currentUserId t·ª´ socket');
      socket.emit('error', { message: 'Kh√¥ng th·ªÉ x√°c ƒë·ªãnh ng∆∞·ªùi d√πng' });
      return;
    }

    try {
      // L·∫•y t·∫•t c·∫£ tin nh·∫Øn gi·ªØa hai ng∆∞·ªùi d√πng
      const messages = await Message.find({
        $or: [
          { senderId: currentUserId, receiverId: otherUserId },
          { senderId: otherUserId, receiverId: currentUserId },
        ],
      })
        .sort({ createdAt: 1 }) // S·∫Øp x·∫øp theo th·ªùi gian tƒÉng d·∫ßn
        .lean(); // Chuy·ªÉn th√†nh plain JavaScript object

      // G·ª≠i danh s√°ch tin nh·∫Øn v·ªÅ client
      socket.emit('messageHistory', {
        messages,
        otherUserId,
      });

      console.log(
        `‚úÖ ƒê√£ g·ª≠i l·ªãch s·ª≠ tin nh·∫Øn gi·ªØa ${currentUserId} v√† ${otherUserId}`
      );
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y tin nh·∫Øn:', error);
      socket.emit('error', {
        message: 'L·ªói khi l·∫•y tin nh·∫Øn',
        error: error.message,
      });
    }
  });
}

module.exports = { sendMessage, getMessages };
