const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const User = require("../models/User");
const { sendOTPEmail } = require("../services/emailService");
const { generateOTP, hashOTP, verifyOTP } = require("../utils/otpUtils");

// H√†m ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
const validateInput = (fields) => {
  return fields.every((field) => field && field.trim() !== "");
};

// ƒêƒÉng k√Ω t√†i kho·∫£n
exports.register = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    if (!validateInput([name, email, password])) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
    }

    if (await User.findOne({ email })) {
      return res.status(400).json({ message: "Email ƒë√£ t·ªìn t·∫°i" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: "ƒêƒÉng k√Ω th√†nh c√¥ng" });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng k√Ω:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
};

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  try {

    const { email, password } = req.body;

    if (!validateInput([email, password])) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u" });
    }

    const user = await User.findOne({ email });
    if (!user) {
      return res.status(400).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return res.status(400).json({ message: "Sai email ho·∫∑c m·∫≠t kh·∫©u" });
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "1h" });

    res.status(200).json({ token, user: { id: user._id, name: user.name, email: user.email } });
  } catch (error) {
    console.error("L·ªói ƒëƒÉng nh·∫≠p:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
};

// Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP)
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    if (!validateInput([email])) {
      return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p email" });
    }

    const user = await User.findOne({ email });
    if (!user) {
  
      return res.status(400).json({ message: "Email kh√¥ng t·ªìn t·∫°i" });
    }

    const otp = generateOTP();
    user.resetOTP = await hashOTP(otp);
    user.resetOTPExpires = Date.now() + 15 * 60 * 1000;
    await user.save();

    await sendOTPEmail(email, otp);
    console.log("üìß OTP ƒë√£ g·ª≠i qua email");

    res.status(200).json({ message: "OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i" });
  } catch (error) {
    console.error("L·ªói g·ª≠i OTP:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
};

// X√°c minh OTP
exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    if (!validateInput([email, otp])) {
      return res.status(400).json({ message: "Thi·∫øu email ho·∫∑c OTP" });
    }

    const user = await User.findOne({ email });
    if (!user || !user.resetOTP || user.resetOTPExpires < Date.now()) {
      return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n" });
    }

    const isOTPValid = await verifyOTP(otp, user.resetOTP);
    if (!isOTPValid) {
      return res.status(400).json({ message: "OTP kh√¥ng h·ª£p l·ªá" });
    }
    user.resetOTP = null;
    user.resetOTPExpires = null;
    await user.save();

    const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: "15m" });

    res.status(200).json({ message: "OTP h·ª£p l·ªá", resetToken });
  } catch (error) {
    console.error("L·ªói x√°c minh OTP:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (req, res) => {
  try {
    const { resetToken, newPassword } = req.body;
    if (!validateInput([resetToken, newPassword])) {
      return res.status(400).json({ message: "Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi" });
    }

    let decoded;
    try {
      decoded = jwt.verify(resetToken, process.env.JWT_SECRET);
    } catch (error) {
      if (error.name === "TokenExpiredError") {
        return res.status(400).json({ message: "Token ƒë√£ h·∫øt h·∫°n" });
      }
      if (error.name === "JsonWebTokenError") {
        return res.status(400).json({ message: "Token kh√¥ng h·ª£p l·ªá" });
      }
      throw error;
    }

    const user = await User.findById(decoded.id);
    if (!user) {
      return res.status(400).json({ message: "Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i" });
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    res.status(200).json({ message: "M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i" });
  } catch (error) {
    console.error("L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:", error);
    res.status(500).json({ error: "L·ªói server" });
  }
};
