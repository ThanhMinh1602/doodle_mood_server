const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/user');
const { sendOTPEmail } = require('../services/emailService');
const { generateOTP, hashOTP, verifyOTP } = require('../utils/otpUtils');
const {
  successResponse,
  errorResponse,
  validationError,
} = require('../utils/responseUtils');

// H√†m ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
const validateInput = (fields) => {
  return fields.every((field) => field && field.trim() !== '');
};

// ƒêƒÉng k√Ω t√†i kho·∫£n
exports.register = async (req, res) => {
  try {
    const { name, email, password } = req.body;

    if (!validateInput([name, email, password])) {
      return validationError(res, 'Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin');
    }

    if (await User.findOne({ email })) {
      return validationError(res, 'Email ƒë√£ t·ªìn t·∫°i');
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ name, email, password: hashedPassword });
    await newUser.save();

    return successResponse(res, null, 'ƒêƒÉng k√Ω th√†nh c√¥ng', 201);
  } catch (error) {
    console.error('L·ªói ƒëƒÉng k√Ω:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};

// ƒêƒÉng nh·∫≠p
exports.login = async (req, res) => {
  try {
    const { email, password, deviceToken } = req.body;
    console.log(req.body);

    if (!validateInput([email, password])) {
      return validationError(res, 'Vui l√≤ng nh·∫≠p email v√† m·∫≠t kh·∫©u');
    }

    const user = await User.findOne({ email });
    if (!user) {
      return validationError(res, 'Sai email ho·∫∑c m·∫≠t kh·∫©u');
    }

    const isPasswordValid = await bcrypt.compare(password, user.password);
    if (!isPasswordValid) {
      return validationError(res, 'Sai email ho·∫∑c m·∫≠t kh·∫©u');
    }

    // C·∫≠p nh·∫≠t deviceToken n·∫øu c√≥
    if (deviceToken) {
      user.deviceToken = deviceToken;
      await user.save();
    }

    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: '1h',
    });

    return successResponse(
      res,
      {
        token,
        user: {
          id: user._id,
          name: user.name,
          email: user.email,
          avatar: user.avatar,
        },
      },
      'ƒêƒÉng nh·∫≠p th√†nh c√¥ng'
    );
  } catch (error) {
    console.error('L·ªói ƒëƒÉng nh·∫≠p:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};

// Qu√™n m·∫≠t kh·∫©u (G·ª≠i OTP)
exports.forgotPassword = async (req, res) => {
  try {
    const { email } = req.body;
    if (!validateInput([email])) {
      return validationError(res, 'Vui l√≤ng nh·∫≠p email');
    }

    const user = await User.findOne({ email });
    if (!user) {
      return validationError(res, 'Email kh√¥ng t·ªìn t·∫°i');
    }

    const otp = generateOTP();
    user.resetOTP = await hashOTP(otp);
    user.resetOTPExpires = Date.now() + 15 * 60 * 1000;
    await user.save();

    await sendOTPEmail(email, otp);
    console.log('üìß OTP ƒë√£ g·ª≠i qua email');

    return successResponse(res, null, 'OTP ƒë√£ ƒë∆∞·ª£c g·ª≠i');
  } catch (error) {
    console.error('L·ªói g·ª≠i OTP:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};

// X√°c minh OTP
exports.verifyOTP = async (req, res) => {
  try {
    const { email, otp } = req.body;
    if (!validateInput([email, otp])) {
      return validationError(res, 'Thi·∫øu email ho·∫∑c OTP');
    }

    const user = await User.findOne({ email });
    if (!user || !user.resetOTP || user.resetOTPExpires < Date.now()) {
      return validationError(res, 'OTP kh√¥ng h·ª£p l·ªá ho·∫∑c ƒë√£ h·∫øt h·∫°n');
    }

    const isOTPValid = await verifyOTP(otp, user.resetOTP);
    if (!isOTPValid) {
      return validationError(res, 'OTP kh√¥ng h·ª£p l·ªá');
    }
    user.resetOTP = null;
    user.resetOTPExpires = null;
    await user.save();

    const resetToken = jwt.sign({ id: user._id }, process.env.JWT_SECRET, {
      expiresIn: '15m',
    });

    return successResponse(res, { resetToken }, 'OTP h·ª£p l·ªá');
  } catch (error) {
    console.error('L·ªói x√°c minh OTP:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};

// ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u
exports.resetPassword = async (req, res) => {
  try {
    const { resetToken, newPassword } = req.body;
    if (!validateInput([resetToken, newPassword])) {
      return validationError(res, 'Thi·∫øu token ho·∫∑c m·∫≠t kh·∫©u m·ªõi');
    }

    let decoded;
    try {
      decoded = jwt.verify(resetToken, process.env.JWT_SECRET);
    } catch (error) {
      if (error.name === 'TokenExpiredError') {
        return validationError(res, 'Token ƒë√£ h·∫øt h·∫°n');
      }
      if (error.name === 'JsonWebTokenError') {
        return validationError(res, 'Token kh√¥ng h·ª£p l·ªá');
      }
      throw error;
    }

    const user = await User.findById(decoded.id);
    if (!user) {
      return validationError(res, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
    }

    user.password = await bcrypt.hash(newPassword, 10);
    await user.save();

    return successResponse(res, null, 'M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l·∫°i');
  } catch (error) {
    console.error('L·ªói ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};

exports.logout = async (req, res) => {
  try {
    const { userId } = req.body;
    if (!userId) {
      return validationError(res, 'Thi·∫øu userId');
    }

    //xo√° deviceToken
    const user = await User.findById(userId);
    if (!user) {
      return validationError(res, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i');
    }
    user.deviceToken = null;
    await user.save();

    return successResponse(res, null, 'ƒêƒÉng xu·∫•t th√†nh c√¥ng');
  } catch (error) {
    console.error('L·ªói ƒëƒÉng xu·∫•t:', error);
    return errorResponse(res, 'L·ªói server', 500, error);
  }
};
