const FriendRequest = require("../models/frendRequest"); 
const { users } = require("../services/socket/userSocketHandler"); // L·∫•y danh s√°ch user online

async function sendFriendRequest(socket, io) {
    socket.on("sendFriendRequest", async ({ senderId, receiverId }) => {
        try {
            const receiverSocketId = users.get(receiverId);

            // Ki·ªÉm tra xem ƒë√£ c√≥ l·ªùi m·ªùi k·∫øt b·∫°n ch∆∞a
            const existingRequest = await FriendRequest.findOne({ senderId, receiverId, status: "pending" });
            if (existingRequest) {
                console.log(`‚ö†Ô∏è L·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${senderId} ƒë·∫øn ${receiverId} ƒë√£ t·ªìn t·∫°i.`);
                return;
            }

            // L∆∞u y√™u c·∫ßu k·∫øt b·∫°n v√†o MongoDB
            const newFriendRequest = new FriendRequest({ senderId, receiverId });
            await newFriendRequest.save();

            if (receiverSocketId) {
                io.to(receiverSocketId).emit("receiveFriendRequest", { senderId, receiverId });
                console.log(`üì© Y√™u c·∫ßu k·∫øt b·∫°n t·ª´ ${senderId} ƒë·∫øn ${receiverId}`);
            } else {
                console.log(`‚ö†Ô∏è Ng∆∞·ªùi d√πng ${receiverId} kh√¥ng online, y√™u c·∫ßu s·∫Ω ƒë∆∞·ª£c l∆∞u.`);
            }
        } catch (error) {
            console.error("‚ùå L·ªói khi g·ª≠i y√™u c·∫ßu k·∫øt b·∫°n:", error);
        }
    });
}

async function acceptFriendRequest(socket, io) {
    socket.on("acceptFriendRequest", async ({ requestId, receiverId }) => {
        try {
            const friendRequest = await FriendRequest.findById(requestId);

            if (!friendRequest) {
                console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n.");
                return;
            }

            if (friendRequest.status !== "pending") {
                console.log("‚ö†Ô∏è L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥.");
                return;
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh "accepted"
            friendRequest.status = "accepted";
            await friendRequest.save();

            const senderSocketId = users.get(friendRequest.senderId);
            if (senderSocketId) {
                io.to(senderSocketId).emit("friendRequestAccepted", { 
                    senderId: friendRequest.senderId, 
                    receiverId: friendRequest.receiverId 
                });
                console.log(`‚úÖ ${receiverId} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n t·ª´ ${friendRequest.senderId}`);
            }

        } catch (error) {
            console.error("‚ùå L·ªói khi ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n:", error);
        }
    });
}

async function getFriendRequests(req, res) {
    try {
        const { userId } = req.params;

        // Ki·ªÉm tra userId c√≥ h·ª£p l·ªá kh√¥ng
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ message: "‚ùå userId kh√¥ng h·ª£p l·ªá" });
        }

        // L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n c·ªßa userId
        const requests = await FriendRequest.find({ receiverId: userId, status: "pending" })
            .populate("senderId", "username email avatar"); // L·∫•y th√™m th√¥ng tin ng∆∞·ªùi g·ª≠i

        if (requests.length === 0) {
            return res.status(200).json({ message: "üì≠ Kh√¥ng c√≥ l·ªùi m·ªùi k·∫øt b·∫°n n√†o", requests: [] });
        }

        res.status(200).json({ message: "‚úÖ L·∫•y danh s√°ch l·ªùi m·ªùi th√†nh c√¥ng", requests });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y danh s√°ch l·ªùi m·ªùi:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
}

module.exports = { sendFriendRequest, acceptFriendRequest ,getFriendRequests};