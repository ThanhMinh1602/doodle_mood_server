const FriendRequest = require('../models/frendRequest'); // S·ª≠a typo n·∫øu c·∫ßn th√†nh "friendRequest"
const User = require('../models/user');
const {
  getUserSocketId,
  isUserOnline,
} = require('../services/socket/userSocketHandler');
const mongoose = require('mongoose');
const { getSocketIo } = require('../services/socket/socketService');

const Status = Object.freeze({
  PENDING: 'pending',
  ACCEPTED: 'accepted',
  REJECTED: 'rejected',
});

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
async function sendFriendRequest(req, res) {
  const { senderId, receiverId } = req.body;
  const io = getSocketIo(); // L·∫•y instance io

  try {
    if (!senderId || !receiverId) {
      return res
        .status(400)
        .json({ message: 'Thi·∫øu senderId ho·∫∑c receiverId' });
    }
    if (senderId === receiverId) {
      return res
        .status(400)
        .json({ message: 'Kh√¥ng th·ªÉ g·ª≠i l·ªùi m·ªùi cho ch√≠nh m√¨nh' });
    }

    const sender = await User.findById(senderId);
    const receiver = await User.findById(receiverId);

    if (!sender || !receiver) {
      return res.status(404).json({ message: 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i' });
    }

    if (
      sender.friends.includes(receiverId) ||
      receiver.friends.includes(senderId)
    ) {
      return res.status(400).json({ message: 'Hai ng∆∞·ªùi ƒë√£ l√† b·∫°n b√®!' });
    }

    const existingRequest = await FriendRequest.findOne({
      senderId,
      receiverId,
      status: Status.PENDING,
    });

    if (existingRequest) {
      return res.status(400).json({ message: 'B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥!' });
    }

    // T·∫°o l·ªùi m·ªùi m·ªõi
    const newFriendRequest = new FriendRequest({ senderId, receiverId });
    await newFriendRequest.save();

    // D·ªØ li·ªáu g·ª≠i qua socket
    const requestData = {
      id: newFriendRequest._id,
      senderBy: {
        id: sender._id,
        name: sender.name,
        email: sender.email,
        avatar: sender.avatar,
      },
      receiverId: receiver._id,
      status: newFriendRequest.status,
      createdAt: newFriendRequest.createdAt,
      updatedAt: newFriendRequest.updatedAt,
    };

    // G·ª≠i th√¥ng b√°o qua socket n·∫øu ng∆∞·ªùi nh·∫≠n online
    const receiverSocketId = getUserSocketId(receiverId);
    if (receiverSocketId) {
      io.to(receiverSocketId).emit('receiveFriendRequest', requestData);
      console.log(`üì© Y√™u c·∫ßu k·∫øt b·∫°n t·ª´ ${senderId} ƒë·∫øn ${receiverId}`);
    }

    return res.status(201).json({
      message: 'G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!',
      requestId: newFriendRequest._id,
    });
  } catch (error) {
    console.error('‚ùå L·ªói API g·ª≠i l·ªùi m·ªùi:', error);
    return res
      .status(500)
      .json({ message: 'L·ªói server', error: error.message });
  }
}

// Ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
async function acceptFriendRequest(req, res) {
  const { requestId, receiverId, status } = req.body;
  const io = getSocketIo(); // L·∫•y instance io

  try {
    if (!mongoose.Types.ObjectId.isValid(requestId)) {
      return res.status(400).json({ message: 'requestId kh√¥ng h·ª£p l·ªá' });
    }

    const friendRequest = await FriendRequest.findById(requestId);
    if (!friendRequest) {
      return res
        .status(404)
        .json({ message: 'Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n!' });
    }

    if (friendRequest.status !== Status.PENDING) {
      return res
        .status(400)
        .json({ message: 'L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥!' });
    }

    const senderId = friendRequest.senderId;

    if (status === Status.ACCEPTED) {
      // C·∫≠p nh·∫≠t danh s√°ch b·∫°n b√®
      await Promise.all([
        User.findByIdAndUpdate(senderId, {
          $addToSet: { friends: receiverId },
        }),
        User.findByIdAndUpdate(receiverId, {
          $addToSet: { friends: senderId },
        }),
      ]);

      // G·ª≠i th√¥ng b√°o qua socket t·ªõi ng∆∞·ªùi g·ª≠i n·∫øu h·ªç online
      const senderSocketId = getUserSocketId(senderId);
      if (isUserOnline(senderId) && senderSocketId) {
        io.to(senderSocketId).emit('friendRequestAccepted', {
          senderId,
          receiverId,
        });
        console.log(`‚úÖ ${receiverId} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi t·ª´ ${senderId}`);
      }
    } else if (status === Status.REJECTED) {
      console.log(`‚ùå ${receiverId} ƒë√£ t·ª´ ch·ªëi l·ªùi m·ªùi t·ª´ ${senderId}`);
    }

    // X√≥a l·ªùi m·ªùi sau khi x·ª≠ l√Ω
    await FriendRequest.findByIdAndDelete(requestId);

    return res.status(200).json({
      message: `L·ªùi m·ªùi k·∫øt b·∫°n ƒë√£ ƒë∆∞·ª£c ${status} v√† x√≥a kh·ªèi h·ªá th·ªëng!`,
    });
  } catch (error) {
    console.error('‚ùå L·ªói API ch·∫•p nh·∫≠n/t·ª´ ch·ªëi l·ªùi m·ªùi:', error);
    return res
      .status(500)
      .json({ message: 'L·ªói server', error: error.message });
  }
}

// L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n
async function getFriendRequests(req, res) {
  const { userId } = req.params;

  try {
    if (!mongoose.Types.ObjectId.isValid(userId)) {
      return res.status(400).json({ message: 'userId kh√¥ng h·ª£p l·ªá' });
    }

    const requests = await FriendRequest.find({
      receiverId: userId,
      status: Status.PENDING,
    }).populate('senderId', 'id name email avatar');

    const body = requests.map((request) => ({
      id: request._id,
      senderBy: request.senderId
        ? {
            id: request.senderId._id,
            name: request.senderId.name,
            email: request.senderId.email,
            avatar: request.senderId.avatar,
          }
        : null,
      receiverId: request.receiverId,
      status: request.status,
      createdAt: request.createdAt,
      updatedAt: request.updatedAt,
    }));

    return res.status(200).json({
      message: body.length
        ? 'L·∫•y danh s√°ch l·ªùi m·ªùi th√†nh c√¥ng'
        : 'Kh√¥ng c√≥ l·ªùi m·ªùi n√†o',
      body,
    });
  } catch (error) {
    console.error('‚ùå L·ªói l·∫•y danh s√°ch l·ªùi m·ªùi:', error);
    return res
      .status(500)
      .json({ message: 'L·ªói server', error: error.message });
  }
}

module.exports = {
  sendFriendRequest,
  acceptFriendRequest,
  getFriendRequests,
};
