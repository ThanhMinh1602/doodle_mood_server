const FriendRequest = require("../models/frendRequest");
const { getUserSocketId, isUserOnline } = require("../services/socket/userSocketHandler");
const mongoose = require("mongoose");

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n qua Socket
function handleSendFriendRequest(socket, io) {
    socket.on("sendFriendRequest", async ({ senderId, receiverId }) => {
        try {
            if (!senderId || !receiverId) {
                throw new Error("Thi·∫øu senderId ho·∫∑c receiverId");
            }

            const senderSocketId = getUserSocketId(senderId);

            // Ki·ªÉm tra l·ªùi m·ªùi tr√πng l·∫∑p
            const existingRequest = await FriendRequest.findOne({
                senderId,
                receiverId,
                status: "pending",
            });
            if (existingRequest) {
                return io.to(senderSocketId).emit("friendRequestStatus", {
                    status: "error",
                    message: "B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥!",
                });
            }

            // T·∫°o v√† l∆∞u l·ªùi m·ªùi k·∫øt b·∫°n
            const newFriendRequest = new FriendRequest({ senderId, receiverId });
            await newFriendRequest.save();

            // Th√¥ng b√°o t·ªõi ng∆∞·ªùi nh·∫≠n n·∫øu online
            const receiverSocketId = getUserSocketId(receiverId);
            if (isUserOnline(receiverId)) {
                io.to(receiverSocketId).emit("receiveFriendRequest", {
                    senderId,
                    receiverId,
                    requestId: newFriendRequest._id,
                });
                console.log(`üì© Y√™u c·∫ßu k·∫øt b·∫°n t·ª´ ${senderId} ƒë·∫øn ${receiverId}`);
            } else {
                console.log(`‚ö†Ô∏è Ng∆∞·ªùi d√πng ${receiverId} kh√¥ng online`);
            }

            // Ph·∫£n h·ªìi ng∆∞·ªùi g·ª≠i
            io.to(senderSocketId).emit("friendRequestStatus", {
                status: "success",
                message: "G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!",
            });
        } catch (error) {
            console.error("‚ùå L·ªói g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:", error.message);
            io.to(getUserSocketId(senderId)).emit("friendRequestStatus", {
                status: "error",
                message: "L·ªói khi g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n!",
            });
        }
    });
}

// Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n qua Socket
function handleAcceptFriendRequest(socket, io) {
    socket.on("acceptFriendRequest", async ({ requestId, receiverId }) => {
        try {
            if (!mongoose.Types.ObjectId.isValid(requestId)) {
                throw new Error("requestId kh√¥ng h·ª£p l·ªá");
            }

            const friendRequest = await FriendRequest.findById(requestId);
            if (!friendRequest) {
                throw new Error("Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n");
            }
            if (friendRequest.status !== "pending") {
                throw new Error("L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥");
            }

            // C·∫≠p nh·∫≠t tr·∫°ng th√°i
            friendRequest.status = "accepted";
            await friendRequest.save();

            // Th√¥ng b√°o t·ªõi ng∆∞·ªùi g·ª≠i n·∫øu online
            const senderSocketId = getUserSocketId(friendRequest.senderId);
            if (isUserOnline(friendRequest.senderId)) {
                io.to(senderSocketId).emit("friendRequestAccepted", {
                    senderId: friendRequest.senderId,
                    receiverId,
                });
                console.log(`‚úÖ ${receiverId} ƒë√£ ch·∫•p nh·∫≠n l·ªùi m·ªùi t·ª´ ${friendRequest.senderId}`);
            }
        } catch (error) {
            console.error("‚ùå L·ªói ch·∫•p nh·∫≠n l·ªùi m·ªùi:", error.message);
            io.to(getUserSocketId(receiverId)).emit("friendRequestStatus", {
                status: "error",
                message: error.message,
            });
        }
    });
}

// API: G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n (HTTP) - Gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc
async function sendFriendRequest(req, res) {
    const { senderId, receiverId } = req.body;

    try {
        if (!senderId || !receiverId) {
            return res.status(400).json({ message: "Thi·∫øu senderId ho·∫∑c receiverId" });
        }

        const existingRequest = await FriendRequest.findOne({
            senderId,
            receiverId,
            status: "pending",
        });
        if (existingRequest) {
            return res.status(400).json({ message: "B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥!" });
        }

        const newFriendRequest = new FriendRequest({ senderId, receiverId });
        await newFriendRequest.save();

        res.status(201).json({
            message: "G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!",
            requestId: newFriendRequest._id,
        });
    } catch (error) {
        console.error("‚ùå L·ªói API g·ª≠i l·ªùi m·ªùi:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
}

// API: Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n (HTTP) - Gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc
async function acceptFriendRequest(req, res) {
    const { requestId } = req.body;

    try {
        if (!mongoose.Types.ObjectId.isValid(requestId)) {
            return res.status(400).json({ message: "requestId kh√¥ng h·ª£p l·ªá" });
        }

        const friendRequest = await FriendRequest.findById(requestId);
        if (!friendRequest) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n" });
        }
        if (friendRequest.status !== "pending") {
            return res.status(400).json({ message: "L·ªùi m·ªùi ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω tr∆∞·ªõc ƒë√≥" });
        }

        friendRequest.status = "accepted";
        await friendRequest.save();

        res.status(200).json({ message: "Ch·∫•p nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n th√†nh c√¥ng!" });
    } catch (error) {
        console.error("‚ùå L·ªói API ch·∫•p nh·∫≠n l·ªùi m·ªùi:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
}

// API: L·∫•y danh s√°ch l·ªùi m·ªùi k·∫øt b·∫°n - Gi·ªØ nguy√™n nh∆∞ tr∆∞·ªõc
async function getFriendRequests(req, res) {
    const { userId } = req.params;

    try {
        if (!mongoose.Types.ObjectId.isValid(userId)) {
            return res.status(400).json({ message: "userId kh√¥ng h·ª£p l·ªá" });
        }

        const requests = await FriendRequest.find({
            receiverId: userId,
            status: "pending",
        }).populate("senderId", "id name email avatar");

        // Thay ƒë·ªïi key senderId -> senderBy
        const body = requests.map(request => ({
            id: request._id,
            senderBy: request.senderId ? {
                id: request.senderId._id,
                name: request.senderId.name, 
                email: request.senderId.email,
                avatar: request.senderId.avatar
            } : null,
            receiverId: request.receiverId,
            status: request.status,
            createdAt: request.createdAt,
            updatedAt: request.updatedAt,
          
        }));

        res.status(200).json({
            message: body.length ? "L·∫•y danh s√°ch l·ªùi m·ªùi th√†nh c√¥ng" : "Kh√¥ng c√≥ l·ªùi m·ªùi n√†o",
            body,
        });
    } catch (error) {
        console.error("‚ùå L·ªói l·∫•y danh s√°ch l·ªùi m·ªùi:", error);
        res.status(500).json({ message: "L·ªói server", error: error.message });
    }
}

module.exports = {
    handleSendFriendRequest,
    handleAcceptFriendRequest,
    sendFriendRequest,
    acceptFriendRequest,
    getFriendRequests,
};