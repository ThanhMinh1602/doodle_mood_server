const FriendRequest = require("../models/FriendRequest");
const User = require("../models/User");
const { sendNotification } = require("../services/socketService");

// G·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n
exports.sendFriendRequest = async (req, res) => {
    try {
        const { senderId, receiverId } = req.body;

        // Ki·ªÉm tra n·∫øu hai ng∆∞·ªùi ƒë√£ l√† b·∫°n b√® ho·∫∑c ƒë√£ g·ª≠i l·ªùi m·ªùi tr∆∞·ªõc ƒë√≥
        const existingRequest = await FriendRequest.findOne({
            $or: [
                { senderId, receiverId },
                { senderId: receiverId, receiverId: senderId }
            ]
        });

        if (existingRequest) {
            return res.status(400).json({ message: "B·∫°n ƒë√£ g·ª≠i l·ªùi m·ªùi ho·∫∑c ƒë√£ l√† b·∫°n b√®" });
        }

        // T·∫°o l·ªùi m·ªùi k·∫øt b·∫°n
        const newRequest = new FriendRequest({ senderId, receiverId });
        await newRequest.save();

        // G·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi nh·∫≠n l·ªùi m·ªùi k·∫øt b·∫°n
        sendNotification(receiverId, "friend_request_received", { senderId });

        res.status(201).json({ message: "ƒê√£ g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n", request: newRequest });
    } catch (error) {
        console.error("‚ùå L·ªói g·ª≠i l·ªùi m·ªùi k·∫øt b·∫°n:", error);
        res.status(500).json({ error: "L·ªói server" });
    }
};

// Ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi l·ªùi m·ªùi k·∫øt b·∫°n
exports.respondToFriendRequest = async (req, res) => {
    try {
        console.log("üì© Nh·∫≠n y√™u c·∫ßu x·ª≠ l√Ω l·ªùi m·ªùi k·∫øt b·∫°n:", req.body);

        const { requestId, userId, action } = req.body;
        
        if (!requestId || !userId || !action) {
            console.log("‚ùå Thi·∫øu requestId, userId ho·∫∑c action");
            return res.status(400).json({ message: "Thi·∫øu d·ªØ li·ªáu ƒë·∫ßu v√†o" });
        }

        // T√¨m l·ªùi m·ªùi k·∫øt b·∫°n
        const friendRequest = await FriendRequest.findById(requestId);
        console.log("üîç L·ªùi m·ªùi t√¨m th·∫•y:", friendRequest);

        if (!friendRequest) {
            console.log("‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi m·ªùi k·∫øt b·∫°n v·ªõi ID:", requestId);
            return res.status(404).json({ message: "L·ªùi m·ªùi kh√¥ng t·ªìn t·∫°i" });
        }

        // Ki·ªÉm tra xem user c√≥ ph·∫£i l√† ng∆∞·ªùi nh·∫≠n kh√¥ng
        if (friendRequest.receiverId.toString() !== userId) {
            console.log("‚ùå User kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω l·ªùi m·ªùi n√†y");
            return res.status(403).json({ message: "B·∫°n kh√¥ng c√≥ quy·ªÅn x·ª≠ l√Ω l·ªùi m·ªùi n√†y" });
        }
        
        // X·ª≠ l√Ω ch·∫•p nh·∫≠n ho·∫∑c t·ª´ ch·ªëi
        if (action === "accept") {
            console.log("‚úÖ Ch·∫•p nh·∫≠n l·ªùi m·ªùi");
            friendRequest.status = "accepted";
        } else if (action === "decline") {
            console.log("‚ùå T·ª´ ch·ªëi l·ªùi m·ªùi");
            friendRequest.status = "declined";
        } else {
            console.log("‚ùå H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá:", action);
            return res.status(400).json({ message: "H√†nh ƒë·ªông kh√¥ng h·ª£p l·ªá. Action ph·∫£i l√† [accept, decline]" });
        }

        await friendRequest.save();

        // G·ª≠i th√¥ng b√°o ƒë·∫øn ng∆∞·ªùi g·ª≠i l·ªùi m·ªùi
        sendNotification(friendRequest.senderId, "friend_request", { action, userId });
        console.log(`üì© ƒê√£ g·ª≠i th√¥ng b√°o ƒë·∫øn user ${friendRequest.senderId} v·ªÅ k·∫øt qu·∫£ l·ªùi m·ªùi`);

        res.status(200).json({ message: `ƒê√£ ${action} l·ªùi m·ªùi k·∫øt b·∫°n` });
    } catch (error) {
        console.error("‚ùå L·ªói x·ª≠ l√Ω l·ªùi m·ªùi k·∫øt b·∫°n:", error);
        res.status(500).json({ error: "L·ªói server" });
    }
};
