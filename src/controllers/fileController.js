const fs = require('fs');
const drive = require('../config/googleAuth');
const Image = require('../models/image');
const User = require('../models/user');
const { formatUploadedBy } = require('../utils/formatBody');
const {
  successResponse,
  errorResponse,
  validationError,
  notFoundError,
} = require('../utils/responseUtils');
// Enum-like structure cho fileType
const FileType = Object.freeze({
  AVATAR: 'avatar',
  STORY: 'story',
});


//  Upload file l√™n Google Drive
async function uploadFileToDrive(filePath, fileName, FileType) {
  // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng

  const fileMetadata = {
    name: fileName,
    parents: FileType.avatar ? ['UserAvatar'] :  FileType.story ? [] : [], // ID c·ªßa th∆∞ m·ª•c tr√™n Google Drive
  };

  const media = {
    mimeType: 'application/octet-stream',
    body: fs.createReadStream(filePath),
  };

  try {
    const response = await drive.files.create({
      resource: fileMetadata,
      media: media,
      fields: 'id',
    });

    const fileId = response.data.id;
    console.log('‚úÖ Upload th√†nh c√¥ng:', fileId);

    // C·∫•p quy·ªÅn ƒë·ªçc cho m·ªçi ng∆∞·ªùi
    await drive.permissions.create({
      fileId: fileId,
      requestBody: { role: 'reader', type: 'anyone' },
    });

    // L·∫•y link file
    const result = await drive.files.get({
      fileId: fileId,
      fields: 'id, webViewLink, webContentLink',
    });
    console.log('üîó Link file:', result);
    // X√≥a file sau khi upload xong
    fs.unlinkSync(filePath);

    return {
      success: true,
      fileId: fileId,
      viewLink: result.data.webViewLink,
      downloadLink: result.data.webContentLink,
    };
  } catch (error) {
    console.error('‚ùå Upload error:', error);
    return { success: false, error: error.message };
  }
}
// Upload file + L∆∞u th√¥ng tin ng∆∞·ªùi t·∫£i l√™n
async function uploadFile(req, res) {
  // Ki·ªÉm tra xem file c√≥ ƒë∆∞·ª£c upload kh√¥ng
  if (!req.file) {
    return validationError(res, 'No file uploaded');
  }

  // Ki·ªÉm tra xem c√≥ userId kh√¥ng
  if (!req.body.userId) {
    return validationError(res, 'Missing userId');
  }

  // Ki·ªÉm tra xem c√≥ fileType kh√¥ng (avatar hay story)
  const { fileType } = req.body;
  
  if (!fileType || !Object.values(FileType).includes(fileType)) {
    return validationError(res, `Invalid fileType. It should be one of the following: ${Object.values(FileType).join(', ')}`);
  }

  const { userId } = req.body;
  console.log('üìÇ File path:', req.file.path);
  console.log('üìÑ File name:', req.file.originalname);
  console.log('üë§ Uploaded by:', userId);
  console.log('üìÑ File type:', fileType);

  // G·ªçi h√†m uploadFileToDrive, truy·ªÅn th√™m tham s·ªë `fileType`
  const result = await uploadFileToDrive(req.file.path, req.file.originalname, fileType);

  if (result.success) {
    try {
      // T·∫°o m·ªõi m·ªôt document Image trong MongoDB
      const newImage = new Image({
        fileId: result.fileId,
        fileName: req.file.originalname,
        mimeType: req.file.mimetype,
        viewLink: result.viewLink,
        downloadLink: result.downloadLink,
        uploadedBy: userId,
        fileType: fileType,  // Th√™m lo·∫°i file (avatar/story)
      });

      await newImage.save();
      return successResponse(res, { body: newImage }, 'Upload th√†nh c√¥ng!');
    } catch (error) {
      console.error('‚ùå L·ªói khi l∆∞u v√†o MongoDB:', error);
      return errorResponse(res, 'L·ªói khi l∆∞u v√†o DB', 500, error);
    }
  } else {
    return errorResponse(res, 'Upload th·∫•t b·∫°i', 500, result.error);
  }
}


// L·∫•y danh s√°ch h√¨nh ·∫£nh c·ªßa b·∫°n b√® v√† ch√≠nh user
async function getImages(req, res) {
  try {
    const userId = req.params.userId;

    // L·∫•y danh s√°ch b·∫°n b√®
    const user = await User.findById(userId).select('friends');
    if (!user) {
      return notFoundError(res, 'Ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i!');
    }

    const friendIds = user.friends.map((friend) => friend.toString());
    friendIds.push(userId);

    // L·ªçc ·∫£nh theo userId v√† b·∫°n b√®, s·∫Øp x·∫øp theo `uploadedAt` gi·∫£m d·∫ßn (m·ªõi nh·∫•t tr∆∞·ªõc)
    const images = await Image.find({ uploadedBy: { $in: friendIds } })
      .populate('uploadedBy', 'name email avatar')
      .sort({ uploadedAt: -1 }); // s·∫Øp x·∫øp gi·∫£m d·∫ßn theo th·ªùi gian

    // ƒê·ªãnh d·∫°ng d·ªØ li·ªáu tr·∫£ v·ªÅ
    const body = images.map((image) => ({
      id: image._id,
      fileId: image.fileId,
      fileName: image.fileName,
      mimeType: image.mimeType,
      viewLink: image.viewLink,
      downloadLink: image.downloadLink,
      uploadedBy: formatUploadedBy(image.uploadedBy),
      uploadedAt: image.uploadedAt.toISOString(),
    }));

    return successResponse(res, {
      total: images.length,
      body: body,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch h√¨nh ·∫£nh:', error);
    return errorResponse(res, 'L·ªói server!', 500, error);
  }
}

// L·∫•y danh s√°ch h√¨nh ·∫£nh t·ª´ Google Drive
async function getImagesByDrive(req, res) {
  try {
    const response = await drive.files.list({
      q: "mimeType contains 'image/'",
      fields: 'files(id, name, mimeType, webViewLink, webContentLink)',
    });

    const images = response.data.files.map((file) => ({
      id: file.id,
      name: file.name,
      mimeType: file.mimeType,
      viewLink: file.webViewLink,
      downloadLink: file.webContentLink,
    }));

    return successResponse(res, { images });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch h√¨nh ·∫£nh t·ª´ Drive:', error);
    return errorResponse(res, 'L·ªói server!', 500, error);
  }
}

// Export module
module.exports = {
  uploadFile,
  getImages,
  getImagesByDrive,
  uploadFileToDrive,
};
