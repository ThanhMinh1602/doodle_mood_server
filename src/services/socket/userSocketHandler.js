const users = new Map(); // L∆∞u socketId theo userId

/**
 * ƒêƒÉng k√Ω ng∆∞·ªùi d√πng online khi h·ªç g·ª≠i userId qua s·ª± ki·ªán 'register'
 * @param {Socket} socket - ƒê·ªëi t∆∞·ª£ng socket c·ªßa ng∆∞·ªùi d√πng
 */
function registerUser(socket) {
    socket.on("register", (userId) => {
        if (!userId) {
            console.error("‚ö†Ô∏è Kh√¥ng c√≥ userId khi ƒëƒÉng k√Ω");
            return;
        }

        users.set(userId, socket.id);
        console.log(`üîµ User ${userId} online v·ªõi socketId: ${socket.id}`);
        
        // Ph√°t s·ª± ki·ªán ƒë·ªÉ th√¥ng b√°o ng∆∞·ªùi d√πng ƒë√£ online (t√πy ch·ªçn)
        socket.broadcast.emit("userOnline", { userId });
    });
}

/**
 * X·ª≠ l√Ω khi ng∆∞·ªùi d√πng ng·∫Øt k·∫øt n·ªëi
 * @param {Socket} socket - ƒê·ªëi t∆∞·ª£ng socket c·ªßa ng∆∞·ªùi d√πng
 */
function handleDisconnect(socket) {
    socket.on("disconnect", () => {
        for (const [userId, socketId] of users.entries()) {
            if (socketId === socket.id) {
                users.delete(userId);
                console.log(`üî¥ User ${userId} offline`);
                
                // Ph√°t s·ª± ki·ªán ƒë·ªÉ th√¥ng b√°o ng∆∞·ªùi d√πng ƒë√£ offline (t√πy ch·ªçn)
                socket.broadcast.emit("userOffline", { userId });
                break;
            }
        }
    });
}

/**
 * L·∫•y socketId c·ªßa user theo userId
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
 * @returns {string | undefined} - socketId ho·∫∑c undefined n·∫øu kh√¥ng t√¨m th·∫•y
 */
function getUserSocketId(userId) {
    return users.get(userId);
}

/**
 * Ki·ªÉm tra xem user c√≥ online hay kh√¥ng
 * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
 * @returns {boolean}
 */
function isUserOnline(userId) {
    return users.has(userId);
}

module.exports = { 
    registerUser, 
    handleDisconnect, 
    users, 
    getUserSocketId, 
    isUserOnline 
};